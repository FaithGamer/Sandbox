24 mars

- Learned how to comment in order to generate Doxygen documentation.

25 mars

- Spent the day reworking the signal system. 
I discovered that std::function can wrap a call to a member function along with the object to call the function upon.
I learned a bit more about variadic function, and how one can store an undefined amount of arguments with tuple, then call this function
by "opening" the tuple with the help of std::index_sequence
-Started working on worker thread, to send tasks to various thread.

26 mars

- Implemented my own delegate, based on function pointers that can take free function or member function thanks to type-erasing
I spent a lot of time trying to have multiple variadic template class with the goal to give the ability to my delegate to fill only a couple of the requiered
parameters but in vain.
Nevertheless the delegate can now call function either with arguments provided with the delegate constructor, or at the time of the call.
- So now signals use the Delegate instead of std::function, but I still need to find how to make the signals be able to send reference or pointers as SignalType

28 mars

- Started working on the core structure of the engine with both Singletons and Systems.
- Sandbox is now a library, added the Application project to make the testing.
- Wonder if Sandbox should be linked dynamically or statically. A dynamic library with sdl static within would be convenient.
- The goal is to make it as easy as possible to launch a project using the engine.
- I'd like to figure out a way to automatically include all the vendor includes in one folder so the Application just need to have one include folder

29 mars

- The core structure is taking shape through the singleton Systems.
- I decided to go with static linking, I spent time wondering about wich is the best option for convinience of the end user.
It seems that the end user will have to link Sandbox plus additionnals libs that are requiered from SDL due to it's static linkage
but not SDL itself wich is linked in Sandbox.. The most annoying things is the various includes needed, and I haven't found a satisfying workaround yet.
- Push system, and fixed update working

31 mars

- I removed the submodules for the sake of simplicity, i just included stable version of all my dependency in my vendor folder
then i copied all the relevant include in a single folder.
I added box2D and Imgui to the project.

01 april

- I am making progress on the core architecture. Made the window a singleton. Input singleton created.
Worflow will be pushing system then launching the engine, eventually with paramters

02 april

- My systems workflow seems to be working, I can now create system that can override OnImGui.
Next Step will be to decide the Entity/Scene workflow, and to add various core Systems: Inputs, 2DRender, Physics...
Also I need to enhance batchrenderer (make it singleton ?) so it can render on target and batch with materials

6 april

- Empty component are never instanciated... I made great progress on the World/Entity system, I start wrapping a lot of the entt capabilities

7 april

- learned about std::tie to make tuple with reference
- ECS is really taking shape, multiple game world can be added to Systems singleton. Game world is a wrapper around entt:registry
Entities can be iterated with method from withtin the system thanks to the ForEachComponent method

29 april

- I successfully debugged somtheing that had let me clueless for a good while ( not to say I was desperate ). Found out I forgot to unbind the vertex array object
after binding buffer, that made any subsequent call to index buffer binding effectively bind with the vertex array.

30 april

- The bug I spent all the week end on: I did put 0 instead of 1 on the w element of the gl_Position in the layer vert shader.

05 may

- I cannot find how to make glm::perspective aspect ratio to crop content in the Y axis rather than the X axis.

18 juillet

Investigating on the rendering issue, the symptoms are that the textures coordinates, or the texture data
isn't passed to the shader, along with the some of the data regarding the transform matrix

20 august

I need to better master git in order to check differences between older commit, and checkout to older commit and comeback safely

18 september

- Fixed the renderer bug: sharedptr constructor could not discriminate between Texture(bool) and Texture(string, textureimportsetting = textureimportSetting())

27 september

- after further testing I realized my batch rendering seems to be totally ok performance wise
especially after making an optimization to not recalculate position vertex when sprite no moving (and avoiding a costly matrix4 * vector4)
I can do further optimization by reducing the layer size wich is very suited for pixel art graphic

09 February

- We can destroy entities and add component when iterating a view

09 march

- Entt will copy things around to keep data packed when component are removed,
But it will use the move constructor if it can, this can avoid call multiple time the component destructor.
This solved a bug I was having when Body got it's destructor called three time for only two objects.

May 2024

I learned that using members initialization is actually better than default constructor
if defualt constructor does nothing else than default initializing members