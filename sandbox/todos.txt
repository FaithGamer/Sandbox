- to create an input, only go through an input map, same for InputMap, create it from Inputs
- consider getting rid of singleton and instead just using Systems that we can easily acces with system::get
- threaded BatchRendering
-material instead of just shader
-resource id for shader/stencil/ ->"render mode option batch id" 
-test if correction of ill formed texture import settings works and overwrite or not the spritesheet and vice versa
-optimize the particle system by recording the prevOffset and nextOffset for each element in the particle array
-test if listener that are null are properly discardded by signaler
-easing
-state machine like in csharp
-some delegate are "eating" the parameters lvalue
-renderer2D hard-code it's default shaders to not rely on asset manager
-engine settings from json
-line renderer width take transform into account
-line antialiasing ?
-test line renderer reverse (must reverse width aswell i think)
-vec operator take references
-test if we can draw a line between two sprites (Z depth)

big tasks:

- fixed aspect ratio for layers
- animator for transform and sprite render
- collisions
- tile map
- path finding
- destroy children entities -> transform system

2D physics, raycasting, shape casting:

-move raycast implementation into cpp
- create callbacks classes for raycasting:
-Body must be moved with both transform&body
-PhysicsSystem OnAddComponent and Transform Update
-find way to draw debug collision shapes (WireRenderer + DrawWire, on a Layer for that purpose)
-once done test collision with differents shapes and fitler
-check polygon winding order


