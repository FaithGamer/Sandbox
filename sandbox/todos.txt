- to create an input, only go through an input map, same for InputMap, create it from Inputs
- consider getting rid of singleton and instead just using Systems that we can easily acces with system::get
- threaded BatchRendering
-material instead of just shader
-resource id for shader/stencil/ ->"render mode option batch id" 
-test if correction of ill formed texture import settings works and overwrite or not the spritesheet and vice versa
-optimize the particle system by recording the prevOffset and nextOffset for each element in the particle array
-test if listener that are null are properly discardded by signaler
-easing
-state machine like in csharp
-some delegate are "eating" the parameters lvalue
-renderer2D hard-code it's default shaders to not rely on asset manager
-engine settings from json
-line renderer width take transform into account
-line antialiasing ?
-test line renderer reverse (must reverse width aswell i think)
-vec operator take references
-test if we can draw a line between two sprites (Z depth)
-rename spriteRender to SpriteRenderer
-Add mouse position from systems and camera

BIG TASKS:

- fixed aspect ratio for render layers
- animator for transform and sprite render
- collisions
- tile map
- path finding
- destroy children entities -> transform system

PHYSICS:

-have mask parameters with Physics::BodyOverlap, and use m_mask with Body::Overlap
-add Body raycast
-check polygon winding order
-test enable/disable DrawCollider
-add offset for colliders
-physics must have filters
-test user data
-check if collision render wire draw correctly
-check if aspect ratio for wire is needed
-implement physics method
-testing of physics
-add entity parent in userdata