#include "pch.h"
#include <shlobj.h> 
#include "PlatformDetection.h"

std::string UserAppDataPath();

/* this code has been generated by AI and hasn't been tested out yet :o) */

#ifdef PLATFORM_WINDOWS
std::string UserAppDataPath()
{
	PWSTR path;
	HRESULT result = SHGetKnownFolderPath(FOLDERID_LocalAppData, 0, NULL, &path);

	if (result != S_OK)
	{
		// handle error
		return nullptr;
	}

	// convert wide char path to char*
	size_t len = wcslen(path) + 1;
	char* pathStr = new char[len];
	size_t numChars;
	wcstombs_s(&numChars, pathStr, len, path, len);

	// free the wide char path
	CoTaskMemFree(path);

	return std::string(pathStr);
}

#elif PLATFORM_MACOS

std::string UserAppDataPath()
{
	char* path = nullptr;
	CFURLRef url = nullptr;

	// get the application support folder URL
	NSArray* urls = NSFileManager.defaultManager.URLsForDirectory(NSApplicationSupportDirectory, NSUserDomainMask);
	if (urls.count > 0)
	{
		url = (__bridge CFURLRef)urls[0];
	}

	if (url != nullptr)
	{
		// convert the URL to a char* path
		char buffer[PATH_MAX];
		if (CFURLGetFileSystemRepresentation(url, true, (UInt8*)buffer, PATH_MAX))
		{
			path = strdup(buffer);
		}
	}

	return path;
}

#elif PLATFORM_LINUX

std::string UserAppDataPath()
{
	char* path = nullptr;
	const char* xdgDataHome = getenv("XDG_DATA_HOME");

	if (xdgDataHome != nullptr)
	{
		// construct the data directory path
		size_t len = strlen(xdgDataHome) + strlen("/myapp") + 1;
		path = new char[len];
		snprintf(path, len, "%s/%s", xdgDataHome, "myapp");
	}

	return path;
}

#endif

